// https://www.spoj.com/problems/HORRIBLE/
// BEST SOURCE FOR STUDYING SEGMENT TREE : https://se7so.blogspot.com/2012/12/segment-trees-and-lazy-propagation.html
// https://cp-algorithms.com/data_structures/segment_tree.html
// https://www.hackerearth.com/practice/data-structures/advanced-data-structures/segment-trees/tutorial/


#include<bits/stdc++.h>
#define fr(i,c,b) for(int i=c;i<b;i++)
#define si(x) int x; scanf("%d", &x)
#define sll(x) ll x; scanf("%lld", &x)
#define pi(x) printf("%d", x)
#define pll(x) printf("%lld", x)
#define nl printf("\n")
#define watch(x) cout << (#x) << " is " << (x) << endl
#define MAX 1000001

typedef long long int ll;

const int N=100005;

ll tree[4*N+1];
ll lazy[4*N+1];

using namespace std;

void build(ll a[],int start, int end, int node)
{
    if(start>end)
        return;
    if(start==end)
    {
        tree[node]=0;
        return;
    }
    else
    {
        int mid=(start+end)/2;
        build(a,start,mid,2*node);
        build(a,mid+1,end,2*node+1);
        tree[node]=tree[2*node]+tree[2*node+1];
    }
}

void update(int l,int r,ll val,int node, int start,int end)
{
    if(lazy[node])
    {
        tree[node]+=(end-start+1)*lazy[node];
        if(start!=end)
        {
            lazy[2*node]+=lazy[node];
            lazy[2*node+1]+=lazy[node];

        }
        lazy[node]=0;
    }
    if(start>r||end<l)
        return;
    if(l<=start && end<=r)
    {
     tree[node]+=(end-start+1)*val;

        if(start!=end)
        {
            lazy[2*node+1]+=val;
            lazy[2*node]+=val;
        }
        return;    
    }
    int mid=(start+end)/2;    
            update(l,r,val,2*node,start,mid);
            update(l,r,val,2*node+1,mid+1,end);
        tree[node]=tree[2*node]+tree[2*node+1];
    
}

ll query(int l,int r,int start,int end,int node)
{
    if(lazy[node])
    {
         tree[node]+=(end-start+1)*lazy[node];
        if(start!=end)
        {
            lazy[2*node]+=lazy[node];
            lazy[2*node+1]+=lazy[node];

        }
        lazy[node]=0;
    }
    if(start>r||end<l)
        return 0;
    
    if(l<=start&&end<=r)
        return tree[node];
        
    int mid=(start+end)/2;    
    return query(l,r,start,mid,2*node)+query(l,r,mid+1,end,2*node+1);
    

}

int main()
{
//    freopen("input.txt", "r", stdin); 

    si(t);
    while(t--)
    {
        memset(tree,0,sizeof(tree));
       memset(lazy,0,sizeof(lazy));
        si(n); ll a[n+1]={0};
        si(q);
        build(a,1,n,1);
        while(q--)
        {
            
            si(qe);
            if(qe==0)
            {
                si(l); si(r); sll(val);
                update(l,r,val,1,1,n);
               
            }
            if(qe==1)
            {
              
                si(l); si(r);
                printf("%lld\n",query(l,r,1,n,1));
            }
        }
    }
}
